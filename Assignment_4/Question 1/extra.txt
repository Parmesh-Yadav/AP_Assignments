// public void sortBooks(Book[] books) {//Bubble Sort
    //     int size = books.length;
    //     Book tempBook = new Book("Temp",1,1);
    //     for(int i = 0; i < size; i++) {
    //         for(int j = 1; j < (size - i); j++) {
    //             BookTitleComparator btc = new BookTitleComparator();
    //             if(btc.compare(books[j-1], books[j]) == 1){
    //                 tempBook = books[j-1];
    //                 books[j-1] = books[j];
    //                 books[j] = tempBook;
    //             }
    //             else{
    //                 BookISBNComparator bisbnc = new BookISBNComparator();
    //                 if(bisbnc.compare(books[j-1], books[j]) == 1){
    //                     tempBook = books[j-1];
    //                     books[j-1] = books[j];
    //                     books[j] = tempBook;
    //                 }
    //                 else{
    //                     BookBarcodeComparator bbc = new BookBarcodeComparator();
    //                     if(bbc.compare(books[j-1], books[j]) == 1){
    //                         tempBook = books[j-1];
    //                         books[j-1] = books[j];
    //                         books[j] = tempBook;
    //                     }
    //                 }
    //             }
                
    //         }
    //     }
    // }

// class BookTitleComparator implements Comparator<Book> {

//     @Override
//     public int compare(Book o1, Book o2) {
//         if (o1.getTitle().compareTo(o2.getTitle()) > 0) {
//             return 1;
//         } else if (o1.getTitle().compareTo(o2.getTitle()) < 0) {
//             return -1;
//         }
//         return 0;
//     }

// }

// class BookISBNComparator implements Comparator<Book> {

//     @Override
//     public int compare(Book o1, Book o2) {
//         if (o1.getISBN() > o2.getISBN()) {
//             return 1;
//         } else if (o1.getISBN() < o2.getISBN()) {
//             return -1;
//         }
//         return 0;
//     }

// }

// class BookBarcodeComparator implements Comparator<Book> {

//     @Override
//     public int compare(Book o1, Book o2) {
//         if (o1.getBarcode() > o2.getBarcode()) {
//             return 1;
//         } else if (o1.getBarcode() < o2.getBarcode()) {
//             return -1;
//         }
//         return 0;
//     }

// }